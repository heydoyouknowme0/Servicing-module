import { useState, useMemo, useCallback, useEffect } from "react";
import { useTable, useSortBy, CellProps } from "react-table";
import { format } from "date-fns";
import { DataType } from "../../types/user.type";
import UserBoardSubTable from "./UserBoardSubTable";
import "./UserPrint.css";
import userService from "../../services/user.service";
import { Table, Button, Modal, Dropdown } from "react-bootstrap";

interface UserBoardProps {
  data: DataType[];
  showAdminBoard?: boolean;
  onStatusChange: (newStatus: number, row: DataType) => void;
}

const UserBoard: React.FC<UserBoardProps> = ({
  data: initialData,
  showAdminBoard,
  onStatusChange,
}) => {
  const [data, setData] = useState<DataType[]>(initialData);
  const [selectedRow, setSelectedRow] = useState<DataType | null>(null);

  useEffect(() => {
    setData(initialData);
  }, [initialData]);

  const handleStatus = useCallback(
    (newStatus: number, selRow: DataType) => {
      onStatusChange(newStatus, selRow);
      setSelectedRow({ ...selRow, status: newStatus });
    },
    [onStatusChange]
  );

  const handleRowClick = useCallback((rowData: DataType) => {
    setSelectedRow(rowData);
  }, []);

  const handleDelete = useCallback(
    (id: number, event: React.MouseEvent<HTMLButtonElement>) => {
      event.stopPropagation();
      userService
        .deleteData(id)
        .then(() => {
          setData((prevData) => prevData.filter((row) => row.id !== id));
        })
        .catch((error) => {
          console.error("Error deleting row:", error);
        });
    },
    []
  );

  const getStatusString = useCallback((status: number) => {
    switch (status) {
      case 0:
        return "Complete";
      case 1:
        return "Requested";
      case -2:
        return "Cancelled";
      case 2:
        return "Approved";
      case -1:
        return "Rejected";
      default:
        return "Unknown";
    }
  }, []);
  const formattedData = useMemo(() => {
    return data.map((row) => {
      return {
        ...row,
        createdAt: format(new Date(row.createdAt), "dd-MM-yyyy"),
      };
    });
  }, [data]);

  const columns = useMemo(
    () => [
      {
        Header: "ID",
        accessor: (_: any, rowIndex: number) => rowIndex + 1,
      },
      {
        Header: "Name",
        accessor: "userName" as const,
      },
      {
        Header: "Company Name",
        accessor: "companyName" as const,
      },
      {
        Header: "Requester",
        accessor: "requester" as const,
      },
      {
        Header: "Driver",
        accessor: "driver" as const,
      },
      {
        Header: "Servicer",
        accessor: "servicer" as const,
      },
      {
        Header: "Email",
        accessor: "email" as const,
      },
      {
        Header: "Status",
        accessor: "status" as const,
        Cell: ({ value }: CellProps<DataType>) => getStatusString(value),
      },
      {
        Header: "Date",
        accessor: "createdAt" as const,
      },
    ],
    [getStatusString]
  );

  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =
    useTable(
      {
        columns,
        data: formattedData,
        initialState: {
          hiddenColumns: showAdminBoard
            ? ["requester"]
            : showAdminBoard === false
            ? ["driver"]
            : ["servicer"],
        },
      },
      useSortBy
    );

  return (
    <div className="container table-responsive">
      <Table hover className="d-print-none" {...getTableProps()}>
        <thead>
          {headerGroups.map((headerGroup) => (
            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>
              {headerGroup.headers.map((column) => (
                <th
                  className="col"
                  {...column.getHeaderProps(column.getSortByToggleProps())}
                  key={column.id}
                >
                  {column.render("Header") as React.ReactNode}
                  <span className="ms-1">
                    {column.isSorted ? (column.isSortedDesc ? "⇓" : "⇑") : ""}
                  </span>
                </th>
              ))}
              <th style={{ textAlign: "center" }} key={headerGroup.id}>
                #
              </th>
            </tr>
          ))}
        </thead>
        <tbody {...getTableBodyProps()}>
          {rows.map((row) => {
            prepareRow(row);
            return (
              <tr
                {...row.getRowProps()}
                onClick={() => handleRowClick(row.original)}
                className={
                  selectedRow?.id === row.original.id ? "selected" : ""
                }
                key={row.id}
              >
                {row.cells.map((cell) => (
                  <td {...cell.getCellProps()} key={cell.column.id}>
                    {cell.render("Cell") as React.ReactNode}
                  </td>
                ))}
                <td style={{ textAlign: "center" }} key={row.id}>
                  <Button
                    variant="outline-warning"
                    size="sm"
                    className="py-0 px-1"
                    onClick={(event) => handleDelete(row.original.id, event)}
                  >
                    ❌
                  </Button>
                </td>
              </tr>
            );
          })}
        </tbody>
      </Table>

      <Modal
        show={!!selectedRow}
        onHide={() => {
          setSelectedRow(null);
        }}
        backdrop="static"
        keyboard={false}
        centered
      >
        <Modal.Header closeButton>
          <Modal.Title as="h1" className="modal-title fs-3">
            Request Details
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <strong>Name:</strong> {selectedRow?.userName}
          <br />
          {showAdminBoard && (
            <>
              <strong>Company Name:</strong> {selectedRow?.companyName}
              <br />
            </>
          )}
          <strong>Email:</strong> {selectedRow?.email}
          <br />
          {selectedRow ? (
            <>
              <strong>Status:</strong>{" "}
              {getStatusString(selectedRow?.status) ?? null}
              <br />
              <strong>Date:</strong> {selectedRow.createdAt}
              <UserBoardSubTable id={selectedRow.id} val={showAdminBoard} />
            </>
          ) : null}
        </Modal.Body>
        {selectedRow ? (
          <Modal.Footer className="d-print-none">
            {showAdminBoard && (
              <Button
                variant="danger"
                onClick={() => handleStatus(-2, selectedRow)}
              >
                Cancel
              </Button>
            )}
            <div className="btn-group">
              <Dropdown>
                <Dropdown.Toggle variant="info" id="dropdown-basic">
                  Change Status
                </Dropdown.Toggle>

                <Dropdown.Menu>
                  <Dropdown.Item onClick={() => handleStatus(0, selectedRow)}>
                    Mark Done
                  </Dropdown.Item>
                  <Dropdown.Item onClick={() => handleStatus(2, selectedRow)}>
                    Accept
                  </Dropdown.Item>
                  <Dropdown.Item onClick={() => handleStatus(-1, selectedRow)}>
                    Reject
                  </Dropdown.Item>
                </Dropdown.Menu>
              </Dropdown>
            </div>
            <Button variant="warning" onClick={window.print}>
              Print
            </Button>
          </Modal.Footer>
        ) : null}
      </Modal>
    </div>
  );
};

export default UserBoard;
